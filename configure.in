AC_PREREQ(2.0)

# Get started
AC_INIT(tdiff.c)

# Remember if CFLAGS was set
if test -z "$CFLAGS"
then
    cflags_unset=true
fi

### 1) Checking for system

### 2) Checking for programs
AC_PROG_CC
AC_PROG_CPP
AC_PROG_RANLIB

### 3) Checking for libraries

### 4) Checking for header files
AC_MSG_CHECKING(for getdents() in libc)
AC_EGREP_CPP(getdents, [#include <sys/dirent.h>], 
	     getdents=libc)
if test "$getdents"
then
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING(for getdents() in sys/dirent.h)
    AC_EGREP_CPP(getdents, [#include <sys/dirent.h>], getdents_sysdirent=1)
    if test "$getdents_sysdirent"
    then
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_SYS_DIRENT_H, 1)
	AC_DEFINE(GETDENTS_STRUCT, dirent)
	AC_DEFINE(GETDENTS_RETURN_Q, f_dent)
	getdents="sys_dirent"
    else
	AC_MSG_RESULT(no)
	unset getdents
    fi
else
    AC_MSG_RESULT(no)
    if test `uname` = Linux
    then
	AC_MSG_CHECKING(for getdents syscall)
	AC_EGREP_CPP(found_sys_getdents, 
	[#include <syscall.h>
	#ifdef SYS_getdents
	found_sys_getdents
	#endif
	], getdents=syscall)
	if test "$getdents"
	then
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_GETDENTS_SYSCALL_H,1)
	    AC_DEFINE(GETDENTS_STRUCT, dent)
	    AC_DEFINE(GETDENTS_NEXTDENT, 1)
	    AC_DEFINE(GETDENTS_NEXTDENT_NAME, d_reclen)
	    AC_DEFINE(GETDENTS_RETURN_Q, f_byte)
	else
	    AC_MSG_RESULT(no)
	fi
    fi
fi

case "$getdents" in
    sys_dirent)
	getdents_decl="#include <sys/dirent.h>"
	;;
    syscall)
	getdents_decl="#include <syscall.h>
         #include <errno.h>
         _syscall3(int, getdents, unsigned int, fd, char*, buf, unsigned int, count);
	 int getdents(unsigned int fd, char* buf, unsigned int count);
	 struct dent {
	   long           d_ino;
           off_t          d_off;
	   unsigned short d_reclen;
	   char           *d_name;
         };"
	;;
esac

### 5) Checking for typedefs: NONE
AC_MSG_CHECKING(for S_IFLNK in stat)
AC_EGREP_CPP(oh_yes_oh_yes, [#include <sys/stat.h>
	     #ifdef S_IFLNK
	     oh_yes_oh_yes
	     #endif],
	     AC_MSG_RESULT(yes)
	     AC_DEFINE(HAVE_S_IFLNK),
	     AC_MSG_RESULT(no))

AC_MSG_CHECKING(for S_IFIFO in stat)
AC_EGREP_CPP(oh_yes_oh_yes, [#include <sys/stat.h>
	     #ifdef S_IFIFO
	     oh_yes_oh_yes
	     #endif],
	     AC_MSG_RESULT(yes)
	     AC_DEFINE(HAVE_S_IFIFO),
	     AC_MSG_RESULT(no))

AC_MSG_CHECKING(for S_IFSOCK in stat)
AC_EGREP_CPP(oh_yes_oh_yes, [#include <sys/stat.h>
	     #ifdef S_IFSOCK
	     oh_yes_oh_yes
	     #endif],
	     AC_MSG_RESULT(yes)
	     AC_DEFINE(HAVE_S_IFSOCK),
	     AC_MSG_RESULT(no))

AC_MSG_CHECKING(for S_IFDOOR in stat)
AC_EGREP_CPP(oh_yes_oh_yes, [#include <sys/stat.h>
	     #ifdef S_IFDOOR
	     oh_yes_oh_yes
	     #endif],
	     AC_MSG_RESULT(yes)
	     AC_DEFINE(HAVE_S_IFDOOR),
	     AC_MSG_RESULT(no))

### 6) Checking for structures: NONE

### 7) Checking for compiler characteristics
AC_CHECK_SIZEOF(short,2)
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)
AC_CHECK_SIZEOF(void *, 4)

AC_MSG_CHECKING(size of ino_t)
sizeof_ino_t=false
AC_TRY_RUN([
#include <stdio.h>
#include <sys/types.h>
int main()
{
  FILE* f;
  if (!(f=fopen("sizeoftest", "w")))
    return 1;
  fprintf(f, "%d\n", sizeof(ino_t));
  fclose(f);
  return 0;
}],sizeof_ino_t=0,,sizeof_ino_t=cross)
case "$sizeof_ino_t" in
    false) AC_MSG_ERROR(Needs to know the size of an ino_t.) ;;
    0)     sizeof_ino_t=`cat sizeoftest 2>/dev/null`; rm sizeoftest;;
    cross) sizeof_ino_t=4 ;;
    *)     AC_MSG_ERROR(Fatal) ;;
esac
case "$sizeof_ino_t" in
    [[0-9]]) ;;
    *)       AC_MSG_ERROR(Non-numeric sizeof(ino_t)=\"$sizeof_ino_t\" ?) ;;
esac
AC_MSG_RESULT($sizeof_ino_t)
AC_DEFINE_UNQUOTED(SIZEOF_INO_T, $sizeof_ino_t)

AC_MSG_CHECKING(size of dev_t)
sizeof_dev_t=false
AC_TRY_RUN([
#include <stdio.h>
#include <sys/types.h>
int main()
{
  FILE* f;
  if (!(f=fopen("sizeoftest", "w")))
    return 1;
  fprintf(f, "%d\n", sizeof(dev_t));
  fclose(f);
  return 0;
}],sizeof_dev_t=0,,sizeof_dev_t=cross)
case "$sizeof_dev_t" in
    false) AC_MSG_ERROR(Needs to know the size of an dev_t.) ;;
    0)     sizeof_dev_t=`cat sizeoftest 2>/dev/null`; rm sizeoftest;;
    cross) sizeof_dev_t=4 ;;
    *)     AC_MSG_ERROR(Fatal) ;;
esac
case "$sizeof_dev_t" in
    [[0-9]]) ;;
    *)       AC_MSG_ERROR(Non-numeric sizeof(dev_t)=\"$sizeof_dev_t\" ?) ;;
esac
AC_MSG_RESULT($sizeof_dev_t)
AC_DEFINE_UNQUOTED(SIZEOF_DEV_T, $sizeof_dev_t)

### 8) Checking for library functions
AC_MSG_CHECKING(for getopt_long())
AC_TRY_LINK([#include <unistd.h>
	     #include <getopt.h>
	    ],[char *a[1];
	     getopt_long(0, a, "foo", NULL, NULL);
	    ],
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_GETOPT_LONG,1),
	    AC_MSG_RESULT(no))

AC_MSG_CHECKING(for mallinfo())
AC_TRY_LINK([#include <malloc.h>],[mallinfo();], 
	    AC_DEFINE(HAVE_MALLINFO,1)
	    AC_MSG_RESULT(yes),
	    AC_MSG_RESULT(no))

AC_MSG_CHECKING(for mmap())
AC_TRY_LINK([#include <sys/mman.h>],
            [mmap((void*)0, 0, 0, 0, 0, 0);],
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_MMAP,1),
	    AC_MSG_RESULT(no))

AC_MSG_CHECKING(for madvise())
AC_TRY_LINK([#include <sys/mman.h>],
            [madvise((void*)0, 0, 0);],
	    AC_MSG_RESULT(yes)
	    madvise=1,
	    AC_MSG_RESULT(no))

if test "$madvise"
then
    AC_MSG_CHECKING(for working madvise())
    AC_TRY_RUN([
      #include <sys/types.h>
      #include <sys/mman.h>
      #include <fcntl.h>

      int main() {
        int fd = open("config.log", O_RDONLY);
        caddr_t addr = mmap(NULL, 10, PROT_READ, MAP_SHARED, fd, 0);
        return madvise(addr, 10, MADV_SEQUENTIAL)<0;
      }
    ],
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_MADVISE,1),    
    AC_MSG_RESULT(no),
    AC_MSG_ERROR(cannot test for working madvise() when cross-compiling))
fi

if test "$getdents"
then
    AC_MSG_CHECKING(for working getdents)
    AC_TRY_RUN([
      #include <sys/types.h>
      #include <fcntl.h>
      $getdents_decl
      int main() {
        char buf[10000];
        int fd;
        int nread;
        fd = open(".", O_RDONLY);
        nread = getdents(fd, buf, 10000);
        return nread<=0;
      }
    ], getdents_works=1,,
    AC_MSG_ERROR(cannot test for working getdents() when cross-compiling))
    if test "$getdents_works"
    then
	AC_MSG_RESULT(yes)
	case "$getdents" in
	    libc)    
		AC_DEFINE(HAVE_GETDENTS,1)
		;;
	    syscall) 
		AC_DEFINE(HAVE_GETDENTS,1)
		;;
	esac
    else
	AC_DEFINE(HAVE_GETDENTS,0)
	AC_MSG_RESULT(no)
    fi
fi

AC_MSG_CHECKING(for lstat())
AC_TRY_LINK([#include <sys/stat.h>
	    #include <unistd.h>],
            [struct stat buf;
	    lstat("/", &buf);],
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_LSTAT,1),
	    AC_MSG_RESULT(no))

### 9) Check for "system services"

### END: output

# Add additional CFLAGS if CFLAGS was not set
LAX_CFLAGS="$CFLAGS"
if test "$cflags_unset" && test "$CC" = gcc
then
    CFLAGS="$CFLAGS -MD"
    LAX_CFLAGS="$LAX_CFLAGS -MD -w"
    case "`uname -s`" in
	Linux) CFLAGS="$CFLAGS -Wall -Wstrict-prototypes -Werror";;
    esac
fi
AC_SUBST(LAX_CFLAGS)

AC_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile)

# Local variables:
# mode: sh
# end:
