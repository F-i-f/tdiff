AC_PREREQ(2.0)

# Get started
AC_INIT(tdiff.c)

# Remember if CFLAGS was set
if test -z "$CFLAGS"
then
    cflags_unset=true
fi

### 1) Checking for system

### 2) Checking for programs
AC_PROG_CC
AC_PROG_CPP

### 3) Checking for libraries

### 4) Checking for header files
AC_MSG_CHECKING(for getdents() in libc)
AC_EGREP_CPP(getdents, [#include <sys/dirent.h>], 
	     getdents=libc)
if test "$getdents"
then
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING(for getdents() in sys/dirent.h)
    AC_EGREP_CPP(getdents, [#include <sys/dirent.h>], getdents_sysdirent=1)
    if test "$getdents_sysdirent"
    then
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_SYS_DIRENT_H, 1)
	AC_DEFINE(GETDENTS_STRUCT, dirent)
	AC_DEFINE(GETDENTS_RETURN_Q, f_dent)
	getdents="sys_dirent"
    else
	AC_MSG_RESULT(no)
	unset getdents
    fi
else
    AC_MSG_RESULT(no)
    if test `uname` = Linux
    then
	AC_MSG_CHECKING(for getdents syscall)
	AC_EGREP_CPP(found_sys_getdents, 
	[#include <syscall.h>
	#ifdef SYS_getdents
	found_sys_getdents
	#endif
	], getdents=syscall)
	if test "$getdents"
	then
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_GETDENTS_SYSCALL_H,1)
	    AC_DEFINE(GETDENTS_STRUCT, dent)
	    AC_DEFINE(GETDENTS_NEXTDENT, 1)
	    AC_DEFINE(GETDENTS_NEXTDENT_NAME, d_reclen)
	    AC_DEFINE(GETDENTS_RETURN_Q, f_byte)
	else
	    AC_MSG_RESULT(no)
	fi
    fi
fi

case "$getdents" in
    sys_dirent)
	getdents_decl="#include <sys/dirent.h>"
	;;
    syscall)
	getdents_decl="#include <syscall.h>
         #include <errno.h>
         _syscall3(int, getdents, unsigned int, fd, char*, buf, unsigned int, count);
	 int getdents(unsigned int fd, char* buf, unsigned int count);
	 struct dent {
	   long           d_ino;
           off_t          d_off;
	   unsigned short d_reclen;
	   char           *d_name;
         };"
	;;
esac

### 5) Checking for typedefs: NONE

### 6) Checking for structures: NONE

### 7) Checking for compiler characteristics

### 8) Checking for library functions
AC_MSG_CHECKING(for mallinfo())
AC_TRY_LINK([#include <malloc.h>],[mallinfo()], 
	    AC_DEFINE(HAVE_MALLINFO,1)
	    AC_MSG_RESULT(yes),
	    AC_MSG_RESULT(no))

AC_MSG_CHECKING(for mmap())
AC_TRY_LINK([#include <sys/mman.h>],
            [mmap((void*)0, 0, 0, 0, 0, 0);],
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_MMAP),
	    AC_MSG_RESULT(no))

AC_MSG_CHECKING(for madvise())
AC_TRY_LINK([#include <sys/mman.h>],
            [madvise((void*)0, 0, 0);],
	    AC_MSG_RESULT(yes)
	    madvise=1,
	    AC_MSG_RESULT(no))

if test "$madvise"
then
    AC_MSG_CHECKING(for working madvise())
    AC_TRY_RUN([
      #include <sys/types.h>
      #include <sys/mman.h>
      #include <fcntl.h>

      int main() {
        int fd = open("configure", O_RDONLY);
        caddr_t addr = mmap(NULL, 10, PROT_READ, MMAP_SHARED, fd, 0);
        return madvise(addr, 10, MADV_SEQUENTIAL)<0;
      }
    ],
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_MADVISE),    
    AC_MSG_RESULT(no),
    AC_MSG_ERROR(cannot test for working madvise() when cross-compiling))
fi

if test "$getdents"
then
    AC_MSG_CHECKING(for working getdents)
    AC_TRY_RUN([
      #include <sys/types.h>
      #include <fcntl.h>
      $getdents_decl
      int main() {
        char buf[10000];
        int fd;
        int nread;
        fd = open(".", O_RDONLY);
        nread = getdents(fd, buf, 10000);
        return nread<=0;
      }
    ], getdents_works=1,,
    AC_MSG_ERROR(cannot test for working getdents() when cross-compiling))
    if test "$getdents_works"
    then
	AC_MSG_RESULT(yes)
	case "$getdents" in
	    libc)    
		AC_DEFINE(HAVE_GETDENTS,1)
		;;
	    syscall) 
		AC_DEFINE(HAVE_GETDENTS,1)
		;;
	esac
    else
	AC_MSG_RESULT(no)
    fi
fi


case "$getdents" in
    libc)    AC_DEFINE(HAVE_GETDENTS) ;;
    syscall) AC_DEFINE(HAVE_GETDENTS) AC_DEFINE(HAVE_GETDENTS_SYSCALL) ;;
esac

### 9) Check for "system services"

### END: output

# Add additional CFLAGS if CFLAGS was not set
LAX_CFLAGS="$CFLAGS"
if test "$cflags_unset" && test "$CC" = gcc
then
    CFLAGS="$CFLAGS -MD"
    LAX_CFLAGS="$LAX_CFLAGS -MD -w"
    case "`uname -s`" in
	Linux) CFLAGS="$CFLAGS -Wall -Wstrict-prototypes -Werror";;
    esac
fi
AC_SUBST(LAX_CFLAGS)

AC_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile)

# Local variables:
# mode: sh
# end:
